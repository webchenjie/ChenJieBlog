(window.webpackJsonp=window.webpackJsonp||[]).push([[87],{683:function(t,e,a){"use strict";a.r(e);var r=a(11),_=Object(r.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"_1-描述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-描述"}},[t._v("#")]),t._v(" 1. 描述")]),t._v(" "),a("p",[t._v("使用 proxy 创建代理对象，在生成时做了 WeakMap 的缓存，如果有则直接返回，没有则创建后缓存，最后返回 proxy 实例")]),t._v(" "),a("h2",{attrs:{id:"_2-过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-过程"}},[t._v("#")]),t._v(" 2. 过程")]),t._v(" "),a("p",[t._v("getter 和 setter 配合 Reflect 进行 get 和 set 操作，在 get 时进行 track 即依赖收集，在 set 时进行 trigger 即依赖触发")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("数据结构")]),t._v(" "),a("ul",[a("li",[t._v("WeakMap\n"),a("ul",[a("li",[t._v("key: 响应式对象")]),t._v(" "),a("li",[t._v("value: Map 对象\n"),a("ul",[a("li",[t._v("key: 响应式对象的指定属性")]),t._v(" "),a("li",[t._v("value: Set 对象")])])])])])])])]),t._v(" "),a("h2",{attrs:{id:"_3-缺陷"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-缺陷"}},[t._v("#")]),t._v(" 3. 缺陷")]),t._v(" "),a("ul",[a("li",[t._v("reactive 只能对复杂数据类型进行使用，没办法使用简单数据类型，所以有 ref")]),t._v(" "),a("li",[t._v("reactive 的响应性数据，不可以进行解构，因为解构之后的数据就不是 proxy 实例，从而也就不是响应式数据了")])])])}),[],!1,null,null,null);e.default=_.exports}}]);