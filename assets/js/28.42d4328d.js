(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{612:function(a,e,t){"use strict";t.r(e);var n=t(8),s=Object(n.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("div",{staticClass:"custom-block tip"},[t("p",[a._v("说起 iframe，大家都会觉得很嫌弃或者很不愿接近，原因大概都是：能耗高，安全问题，spider 不喜欢它...也有（不少）同学内心独白就是：不！这很 low 很 dirty，我才不想用惹！但是我们必须的承认 iframe 之强大，很多时候我们都会（不得不）使用它，真的素又爱又恨呐")])]),a._v(" "),t("h2",{attrs:{id:"iframe-基本概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#iframe-基本概念"}},[a._v("#")]),a._v(" iframe 基本概念")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v('<iframe src="demo.html" height="300" width="500" name="demo" scrolling="auto" sandbox="allow-same-origin"></iframe>\niframe的一些基本属性:\n  src iframe页面地址，有同域跨域之分\n  height iframe高度\n  width iframe宽度\n  name iframe命名，可通过window.frames[xxx]被调用\n  scrolling iframe滚动模式\n  sandbox html5新特性，用于限制iframe的功能\n')])])]),t("h2",{attrs:{id:"使用-iframe-的正确姿势"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用-iframe-的正确姿势"}},[a._v("#")]),a._v(" 使用 iframe 的正确姿势")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("1. 我们可以通过contentWindow和contentDocument两个API获取iframe的window对象和document对象。\n  let iframe = document.getElementById('demo');\n  let iwindow = iframe.contentWindow; // 获取iframe的window对象\n  let idoc = iframe.contentDocument; // 获取iframe的document对象\n2. 刚刚我们提到了iframe的name属性，我们也可以通过window.frames[iframeName]来调用iframe。\n  let iframe = window.frames['demo']\n")])])]),t("h2",{attrs:{id:"iframe-使用父级内容的正确姿势"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#iframe-使用父级内容的正确姿势"}},[a._v("#")]),a._v(" iframe 使用父级内容的正确姿势")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("我们通过window.self，window.parent，window.top这三个属性分别获取自身window对象，父级window对象，顶级window对象\n")])])]),t("h2",{attrs:{id:"iframe-跨域通讯之-document-domain"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#iframe-跨域通讯之-document-domain"}},[a._v("#")]),a._v(" iframe 跨域通讯之 document.domain")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("1. 对于主域相同子域不同的两个页面，我们可以通过document.domain + iframe来解决跨域通信问题。\n2. 举个🌰，网页a(http://www.easonwong.com)和网页b(http://script.easonwong.com)，两者都设置document.domain = 'easonwong.com'（这样浏览器就会认为它们处于同一个域下），然后网页a再创建iframe上网页b，就可以进行通信啦～！\n")])])]),t("h3",{attrs:{id:"网页-a"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#网页-a"}},[a._v("#")]),a._v(" 网页 a")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("document.domain = 'easonwong.com';\nvar ifr = document.createElement('iframe');\nifr.src = 'http://script.easonwong.com';\nifr.style.display = 'none';\ndocument.body.appendChild(ifr);\nifr.onload = function(){\n  let doc = ifr.contentDocument || ifr.contentWindow.document;\n  // 在这里操纵b.html\n};\n")])])]),t("h3",{attrs:{id:"网页-b"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#网页-b"}},[a._v("#")]),a._v(" 网页 b")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("document.domain = 'easonwong.com';\n")])])]),t("h2",{attrs:{id:"iframe-跨域通讯之-postmessage"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#iframe-跨域通讯之-postmessage"}},[a._v("#")]),a._v(" iframe 跨域通讯之 postMessage")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("我们可以通过html5这个新特性进行iframe间的跨域通信，使用postMessage进行数据传递，通过Message监听通信事件。举个🌰\n")])])]),t("h3",{attrs:{id:"网页-a-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#网页-a-2"}},[a._v("#")]),a._v(" 网页 a")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("document.domain = 'easonwong.com';\nvar ifr = document.createElement('iframe');\nifr.src = 'http://script.easonwong.com';\nifr.style.display = 'none';\ndocument.body.appendChild(ifr);\n// 发送数据\nifr.postmessage('hello, I`m a', 'http://script.easonwong.com');\n")])])]),t("h3",{attrs:{id:"网页-b-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#网页-b-2"}},[a._v("#")]),a._v(" 网页 b")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("// 监听message事件\nwindow.addEventListener('message', receiver, false);\nfunction receiver(e) {\n    if (e.origin == 'http://www.easonwong.com') {\n        if (e.data == 'hello, I`m a') {\n            e.source.postMessage('hello, I`m b', e.origin);信息\n        }\n    }\n}\n")])])]),t("h2",{attrs:{id:"iframe-的其他用途"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#iframe-的其他用途"}},[a._v("#")]),a._v(" iframe 的其他用途")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("1. 用iframe进行异步请求\n    在很久很久很久以前，久到ajax还没出现的时候，人们会用iframe来进行异步请求。\n    大概就是异步创建iframe，然后后台返回数据在iframe中，我们在从里面获取数据。\n    例如在我做过的一个项目中，通过iframe.src传入一个文件下载地址，实现无需打开新窗口下载文件。\n2. 引用/展示第三方内容\n3. 需要独立样式和带有交互的内容，例如幻灯片\n4. sandbox沙箱隔离\n5. 历史记录管理\n")])])]),t("h2",{attrs:{id:"iframe-的安全问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#iframe-的安全问题"}},[a._v("#")]),a._v(" iframe 的安全问题")]),a._v(" "),t("h3",{attrs:{id:"iframe-小广告"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#iframe-小广告"}},[a._v("#")]),a._v(" iframe 小广告")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("1. 很让我们讨厌iframe的一点，就是很多*网站都会有各种让人防不胜防的小广告，它们大多就是用通过iframe实现的\n   本来想点击某个播放按钮，结果马鸭直接跳几十跳不知道去了哪个新世界去了。\n2. 更讨厌的一种情况是，可能不知道哪天用户突然拿刀过来，说我们的项目页面里出现了野鸡广告，说我们在消费他们\n   一脸懵逼的我们觉得十分无辜。实际上就是我们的页面被运行商劫持了，被挂上了注入了不知名的野鸡广告。\n3. 所以我们一定要注意在用iframe的同时，要防止我们被iframe了。\n")])])]),t("h3",{attrs:{id:"防嵌套页面操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#防嵌套页面操作"}},[a._v("#")]),a._v(" 防嵌套页面操作")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("1. 在前端领域，我们可以通过window.top来防止我们页面被嵌套。\n  if(window != window.top){\n    window.top.location.href = myURL;\n  }\n\n2. 或者通过window.location.host来检测是否跨域了\n  if (top.location.host != window.location.host) {\n　　top.location.href = window.location.href;\n  }\n3. 而后端也可以做对应的防范措施，通过设置X-Frame-Options响应头来确保自己网站的内容没有被嵌到别人的网站中去\n   也从而避免了点击劫持 (clickjacking) 的攻击。\n")])])]),t("h3",{attrs:{id:"csp"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#csp"}},[a._v("#")]),a._v(" CSP")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("1. 内容安全策略（CSP）用于检测和减轻用于 Web 站点的特定类型的攻击，例如 XSS 和数据注入等。\n\n2. 通过CSP配置sandbox和child-src可以设置iframe的有效地址，它限制适iframe的行为，包括阻止弹出窗口\n   防止插件和脚本的执行,而且可以执行一个同源策略。\n\n3. 我们可以在html头部中加上<meta>标签\n  <meta http-equiv=\"Content-Security-Policy\" content=\"child-src 'unsafe-inline' 'unsafe-eval' www.easonwong.com\">\n\n3. 或者通过HTTP头部信息加上Content-Security-Policy字段\n")])])]),t("div",{staticClass:"custom-block tip"},[t("p",[a._v("作者：Rocky_Wong "),t("br"),a._v("\n链接：https://www.jianshu.com/p/7ec986aa28a7 "),t("br"),a._v("\n来源：简书")])])])}),[],!1,null,null,null);e.default=s.exports}}]);