(window.webpackJsonp=window.webpackJsonp||[]).push([[93],{689:function(t,a,r){"use strict";r.r(a);var e=r(11),v=Object(e.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h2",{attrs:{id:"简介"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[t._v("#")]),t._v(" 简介")]),t._v(" "),r("p",[t._v("转化（transform）AST，得到 JS AST")]),t._v(" "),r("h2",{attrs:{id:"转换策略"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#转换策略"}},[t._v("#")]),t._v(" 转换策略")]),t._v(" "),r("p",[t._v("我们知道从 AST 转化为 JS AST 本质上是一个对象结构的变化，变化的本质是为了后面更方便的解析对象，生成 render 函数")]),t._v(" "),r("p",[t._v("在转化的过程中，我们需要遵循如下策略：")]),t._v(" "),r("ul",[r("li",[t._v("深度优先")]),t._v(" "),r("li",[t._v("转化函数分离（针对不同的类型使用不同的方法进行转化）")]),t._v(" "),r("li",[t._v("上下文对象")])]),t._v(" "),r("h2",{attrs:{id:"过程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#过程"}},[t._v("#")]),t._v(" 过程")]),t._v(" "),r("ul",[r("li",[t._v("递归解析 AST")]),t._v(" "),r("li",[t._v("根据不同类型进行不同的解析")]),t._v(" "),r("li",[t._v("合并模板的差值表达式")]),t._v(" "),r("li",[t._v("生成 codegenNode")])])])}),[],!1,null,null,null);a.default=v.exports}}]);